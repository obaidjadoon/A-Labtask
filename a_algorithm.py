# -*- coding: utf-8 -*-
"""A*Algorithm

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fNxuoSD4aSrp8di4ovOt1D0TkW4v3_6l
"""

import heapq   # priority queue

# ðŸ”¹ Updated weighted graph with different distances
graph = {
    "Lahore": {"Islamabad": 280, "Faisalabad": 200},
    "Islamabad": {"Lahore": 280, "Peshawar": 170},
    "Faisalabad": {"Lahore": 200, "Multan": 250},
    "Multan": {"Faisalabad": 250, "Karachi": 900},
    "Peshawar": {"Islamabad": 170},
    "Karachi": {"Multan": 900}
}

# ðŸ”¹ Updated heuristic values (closer estimates to Karachi)
heuristic = {
    "Lahore": 1250,
    "Islamabad": 1150,
    "Faisalabad": 1100,
    "Multan": 900,
    "Peshawar": 1270,
    "Karachi": 0
}

def a_star(graph, start, goal, heuristic):
    open_list = []
    heapq.heappush(open_list, (heuristic[start], [start]))
    g_costs = {start: 0}
    closed_set = set()

    while open_list:
        f, path = heapq.heappop(open_list)
        node = path[-1]

        if node == goal:
            return path, g_costs[node]

        if node in closed_set:
            continue

        closed_set.add(node)

        for neighbor, cost in graph[node].items():
            tentative_g = g_costs[node] + cost
            if neighbor not in g_costs or tentative_g < g_costs[neighbor]:
                g_costs[neighbor] = tentative_g
                f_cost = tentative_g + heuristic.get(neighbor, float('inf'))
                new_path = path + [neighbor]
                heapq.heappush(open_list, (f_cost, new_path))

    return None, float('inf')


# âœ… Example run
if __name__ == "__main__":
    start_city = "Lahore"
    goal_city = "Karachi"
    path, cost = a_star(graph, start_city, goal_city, heuristic)
    print("A* path:", path)
    print("Total cost:", cost)